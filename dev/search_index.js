var documenterSearchIndex = {"docs":
[{"location":"guide/mloverview/#LaskaML-overview","page":"Overview","title":"LaskaML overview","text":"","category":"section"},{"location":"guide/mloverview/","page":"Overview","title":"Overview","text":"To come...","category":"page"},{"location":"guide/importing/#Importing-data-processed-in-Phy","page":"Importing data processed in Phy","title":"Importing data processed in Phy","text":"","category":"section"},{"location":"guide/importing/","page":"Importing data processed in Phy","title":"Importing data processed in Phy","text":"Importing Phy output data is done using LaskaCore.importphy. This will return a LaskaCore.PhyOutput struct.","category":"page"},{"location":"guide/importing/#Basic-usage","page":"Importing data processed in Phy","title":"Basic usage","text":"","category":"section"},{"location":"guide/importing/","page":"Importing data processed in Phy","title":"Importing data processed in Phy","text":"The method below will import data found in \"path/to/phy/output\". By default, only \"good\" clusters as found in \"cluster_info.tsv\" will be included. Setting includemua to false will include all clusters.","category":"page"},{"location":"guide/importing/","page":"Importing data processed in Phy","title":"Importing data processed in Phy","text":"result = importphy(\"path/to/phy/output\")","category":"page"},{"location":"guide/importing/","page":"Importing data processed in Phy","title":"Importing data processed in Phy","text":"In order to include spikeGLX metadata and/or a specific channel (exported from spikeGLX) with trigger events paths to these must be included. For spikeGLX metadata, a path to the folder containing the .meta file is enough. For triggerchannel, a direct path is required.","category":"page"},{"location":"guide/importing/","page":"Importing data processed in Phy","title":"Importing data processed in Phy","text":"result = importphy(\n    \"path/to/phy/output\",\n    \"path/to/spikeGLX/meta\",\n    \"path/to/triggerchannel.bin\"\n)","category":"page"},{"location":"guide/importing/#Filtering-clusters","page":"Importing data processed in Phy","title":"Filtering clusters","text":"","category":"section"},{"location":"guide/importing/","page":"Importing data processed in Phy","title":"Importing data processed in Phy","text":"Clusters may be easily filtered on import based on variable(s) found in \"cluster_info.tsv\" by including a filter as the second argument.","category":"page"},{"location":"guide/importing/","page":"Importing data processed in Phy","title":"Importing data processed in Phy","text":"A filter is a Tuple with 2 entries:","category":"page"},{"location":"guide/importing/","page":"Importing data processed in Phy","title":"Importing data processed in Phy","text":"A Symbol matching a column in \"cluster_info.tsv\".\n\nA Function returning true/false applicable to the specified column.","category":"page"},{"location":"guide/importing/","page":"Importing data processed in Phy","title":"Importing data processed in Phy","text":"Several filters may be included by wrapping them in an outer Tuple.","category":"page"},{"location":"guide/importing/#Example","page":"Importing data processed in Phy","title":"Example","text":"","category":"section"},{"location":"guide/importing/","page":"Importing data processed in Phy","title":"Importing data processed in Phy","text":"In the example below, we create a filter with a function that will return true if x > 1 and apply it to the cluster_info.tsv variable :fr. This will cause only clusters with a firerate of more than 1Hz to be included in the result.","category":"page"},{"location":"guide/importing/","page":"Importing data processed in Phy","title":"Importing data processed in Phy","text":"function f(x)\n    return x>1\nend\n\nfilter = (:fr, f)\n\nresult = importphy(\n    \"path/to/phy/output\",\n    filter,\n    \"path/to/spikeGLX/meta\",\n    \"path/to/triggerchannel.bin\"\n)","category":"page"},{"location":"guide/install/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"guide/install/","page":"Installation","title":"Installation","text":"All Laska-packages are available from the registry LaskaRegistry.","category":"page"},{"location":"guide/install/","page":"Installation","title":"Installation","text":"Adding this registry only has to be done once per Julia installation by running:","category":"page"},{"location":"guide/install/","page":"Installation","title":"Installation","text":"using Pkg\n\nPkg.Registry.add(RegistrySpec(url=\"https://github.com/Laska-jl/LaskaRegistry.git\"))","category":"page"},{"location":"guide/install/","page":"Installation","title":"Installation","text":"After adding the registry the packages may be added. Functionality is divided into:","category":"page"},{"location":"guide/install/","page":"Installation","title":"Installation","text":"LaskaCore.jl: Functions for importing data, types and their interfaces as well as some unexported helper functions.\nLaskaStats.jl: Functions for calculating stats about clusters such as CV~2~, MAD, frequency over time etc. Reexports LaskaCore.jl\nLaskaPlot.jl: Recipes and functions for creating basic plots. Uses Makie. Reexports both LaskaCore.jl and LaskaStats.jl.\nLaska.jl: Includes all of the above packages and reexports their functions.","category":"page"},{"location":"guide/install/","page":"Installation","title":"Installation","text":"Once LaskaRegistry has been added, the package(s) may be added like so:","category":"page"},{"location":"guide/install/","page":"Installation","title":"Installation","text":"Add all functionality:","category":"page"},{"location":"guide/install/","page":"Installation","title":"Installation","text":"Pkg.add(\"Laska\")","category":"page"},{"location":"guide/install/","page":"Installation","title":"Installation","text":"...or add only the functionality you need:","category":"page"},{"location":"guide/install/","page":"Installation","title":"Installation","text":"Pkg.add(\"LaskaCore\")\nPkg.add(\"LaskaStats\")\nPkg.add(\"LaskaPlot\") # Currently not functionally different from adding Laska.","category":"page"},{"location":"ref/summarize/#Summary-statistics","page":"Summarizing","title":"Summary statistics","text":"","category":"section"},{"location":"ref/summarize/#Summary-statistics-of-clusters","page":"Summarizing","title":"Summary statistics of clusters","text":"","category":"section"},{"location":"ref/summarize/#MAD","page":"Summarizing","title":"MAD","text":"","category":"section"},{"location":"ref/summarize/","page":"Summarizing","title":"Summarizing","text":"LaskaStats.mad","category":"page"},{"location":"ref/summarize/#LaskaStats.mad","page":"Summarizing","title":"LaskaStats.mad","text":"mad(cluster::T) where {T<:Laska.AbstractCluster}\n\nCalculate the median absolute difference from the median interspike interval of a cluster.\n\n\n\n\n\n","category":"function"},{"location":"ref/summarize/#CV2","page":"Summarizing","title":"CV2","text":"","category":"section"},{"location":"ref/summarize/","page":"Summarizing","title":"Summarizing","text":"LaskaStats.cv2(cluster::LaskaCore.Cluster)","category":"page"},{"location":"ref/summarize/#LaskaStats.cv2-Tuple{Cluster}","page":"Summarizing","title":"LaskaStats.cv2","text":"cv2(cluster::Cluster)\n\nReturns CV2 values of cluster as a vector.\n\nCV2 is calculated according to:\n\nCV2 = frac2ISI_n+1 - ISI_n(ISI_n+1 + ISI_n)\n\n\n\n\n\n","category":"method"},{"location":"ref/summarize/","page":"Summarizing","title":"Summarizing","text":"LaskaStats.cv2mean(cluster::LaskaCore.Cluster)","category":"page"},{"location":"ref/summarize/#LaskaStats.cv2mean-Tuple{Cluster}","page":"Summarizing","title":"LaskaStats.cv2mean","text":"cv2mean(cluster::Cluster)\n\nCalculates the mean CV2 of cluster.\n\n\n\n\n\n","category":"method"},{"location":"ref/summarize/#ISI","page":"Summarizing","title":"ISI","text":"","category":"section"},{"location":"ref/summarize/","page":"Summarizing","title":"Summarizing","text":"LaskaStats.isi","category":"page"},{"location":"ref/summarize/#LaskaStats.isi","page":"Summarizing","title":"LaskaStats.isi","text":"isi(cluster::Cluster{T}) where {T<:Real}\n\nCalculate the ISI of each spike in cluster.\n\n\n\n\n\n","category":"function"},{"location":"ref/summarize/#Frequency","page":"Summarizing","title":"Frequency","text":"","category":"section"},{"location":"ref/summarize/","page":"Summarizing","title":"Summarizing","text":"LaskaStats.frequency(cluster::LaskaCore.Cluster, period::T) where {T<:Real}","category":"page"},{"location":"ref/summarize/#LaskaStats.frequency-Union{Tuple{T}, Tuple{Cluster, T}} where T<:Real","page":"Summarizing","title":"LaskaStats.frequency","text":"frequency(cluster::Cluster, period::T) where {T<:Real}\n\nReturns a Vector containing the frequency of the cluster in the form of spikes/period binned at each multiple of period.             Spiketimes are binned to the next largest multiple of period. Ie a spike happening at time = 30001 will be in the 60000 bin.\n\nExample\n\nFor a cluster sampled at 30 000Hz...\n\nLaskaStats.frequency(cluster, 30000)\n\n...will return spikes/second.\n\nIndexing into the result as:        \n\nresult[n]\n\nWill return the n:th bin which describes the number of spikes occuring between period * n and period * n-1.\n\n\n\n\n\n","category":"method"},{"location":"ref/visualize/#Visualizing","page":"Visualize","title":"Visualizing","text":"","category":"section"},{"location":"ref/visualize/#Recipes","page":"Visualize","title":"Recipes","text":"","category":"section"},{"location":"ref/visualize/#Frequency-by-depth","page":"Visualize","title":"Frequency by depth","text":"","category":"section"},{"location":"ref/visualize/","page":"Visualize","title":"Visualize","text":"LaskaPlot.frequencybydepthplot","category":"page"},{"location":"ref/visualize/#LaskaPlot.frequencybydepthplot","page":"Visualize","title":"LaskaPlot.frequencybydepthplot","text":"frequencybydepthplot(experiment::RelativeSpikes, depths, period)\nfrequencybydepthplot!(ax, experiment::RelativeSpikes, depths, period)\n\nMakie plot recipe for relative frequency by depth.           \n\nRequires an experiment::RelativeSpikes, number of depths and period for length of bins when calculating frequency.\n\nAttributes\n\nPlot-specific Attributes\n\ncustomx A vector of custom x values. Should be of the same length as the number of frequency bins.\nstimlines::Bool: Should lines at each stimulation time (as specified when creating the RelativeSpikes-struct) be included?\nstimlinecolor\nstimlinealpha\nstimlinewidth\n\nGeneral 'lines' attributes\n\ncolor\nlinestyle\nlinewidth\ncolormap\ncolorscale\ncolorrange\nnan_color\nlowclip\nhighclip\nalpha\nvisible\noverdraw\nfxaa\ninspectable\ndepth_shift\nspace\n\n\n\n\n\n","category":"function"},{"location":"ref/test/#Test-please-ignore","page":"Test please ignore","title":"Test please ignore","text":"","category":"section"},{"location":"ref/test/","page":"Test please ignore","title":"Test please ignore","text":"Lorem ipsum dolor sit amet, officia excepteur ex fugiat reprehenderit enim labore culpa sint ad nisi Lorem pariatur mollit ex esse exercitation amet. Nisi anim cupidatat excepteur officia. Reprehenderit nostrud nostrud ipsum Lorem est aliquip amet voluptate voluptate dolor minim nulla est proident. Nostrud officia pariatur ut officia. Sit irure elit esse ea nulla sunt ex occaecat reprehenderit commodo officia dolor Lorem duis laboris cupidatat officia voluptate. Culpa proident adipisicing id nulla nisi laboris ex in Lorem sunt duis officia eiusmod. Aliqua reprehenderit commodo ex non excepteur duis sunt velit enim. Voluptate laboris sint cupidatat ullamco ut ea consectetur et est culpa et culpa duis.","category":"page"},{"location":"ref/triggers/#Trigger-events","page":"Trigger events","title":"Trigger events","text":"","category":"section"},{"location":"ref/triggers/","page":"Trigger events","title":"Trigger events","text":"LaskaCore.relativespikes","category":"page"},{"location":"ref/triggers/#LaskaCore.relativespikes","page":"Trigger events","title":"LaskaCore.relativespikes","text":"relativespikes(p::PhyOutput{T}, stimtrain::Dict{String,T}, back::T, forward::T) where {T<:Real}\n\nReturns a RelativeSpikes struct which wraps RelativeCluster:s and contains only spiketimes occuring back ms before triggers or forward ms after them.\n\nVariables\n\np::PhyOutput{T} – A PhyOutput struct.\nstimtrain::Dict{String, T} – A dict describing each trigger event. For example Dict(\"CS\" => 0, \"US\" => 300) would mean one event(CS) at trigger and another(US) 300ms after trigger.\nback::T – Number of ms before trigger to include.\nforward::T – Number of ms after trigger to include.\n\n\n\n\n\n","category":"function"},{"location":"ref/hhref/#Hodgkin-Huxley-models","page":"Hodgkin Huxley models","title":"Hodgkin Huxley models","text":"","category":"section"},{"location":"ref/hhref/","page":"Hodgkin Huxley models","title":"Hodgkin Huxley models","text":"Modules = [LaskaML.hh]","category":"page"},{"location":"ref/hhref/#LaskaML.hh.HHChannel","page":"Hodgkin Huxley models","title":"LaskaML.hh.HHChannel","text":"struct HHChannel{G<:Number, V<:Number, P<:Number, Q<:Number}\n    id::String\n    g::G  # Max conductance\n    Vrev::V # Ion specific reversal potential\n    alpha_m::Union{Function, Nothing} # Alpha for gating variable m\n    beta_m::Union{Function, Nothing} # Beta for gating variable m\n    p::P # Exponent of gating variable m\n    alpha_h::Union{Function, Nothing} # Alpha for gating variable h\n    beta_h::Union{Function, Nothing} # Beta for garing variable h\n    q::Q # Exponent for gating variable h\n    m_inf::Union{Function, Nothing}\n    h_inf::Union{Function, Nothing}\nend\n\nGeneral struct for a channel in the Hodgkin-Huxley model in the form:\n\nI_x = barg_xm^p_xh^q_x(V_m-V_x)\n\nThe gating variables m and h are are given by α_m, β_m, α_h and β_h respectively in the following wa\n\nbeginaligned\nfracdmdt = alpha(V_M)(1-m) - beta(V_M)m \nfracdhdt = alpha(V_M)(1-h) - beta(V_M)h\nendaligned\n\n\n\n\n\n","category":"type"},{"location":"ref/hhref/#LaskaML.hh.HHModel","page":"Hodgkin Huxley models","title":"LaskaML.hh.HHModel","text":"struct HHModel{G<:Number, V<:Number, P<:Number, Q<:Number}\n    V_0::G\n    I_0::G\n    C_0::G\n    channels::Vector{HHChannel{G,V,P,Q}}\n\n    function HHModel(V_0, I_0, C_0, channels::HHChannel{G, V, P, Q}...) where {G<:Number, V<:Number, P<:Number, Q<:Number}\n        new{G,V,P,Q}(V_0, I_0, C_0, [channels...])\n    end\nend\n\nStruct for holding several HHChannels, representing an (almost complete) model.\n\nThe channels are indexable using model[i].\n\nThe struct can be initialized by calling its inner constructor and passing it the channels to be part of the model. For convenience, the struct may also be initialized by \"adding\" HHChannels together using the + operator. The + operator may also be used to add HHChannels to an existing HHModel\n\n\n\n\n\n","category":"type"},{"location":"ref/hhref/#LaskaML.hh.Vrev-Tuple{LaskaML.hh.HHChannel}","page":"Hodgkin Huxley models","title":"LaskaML.hh.Vrev","text":" Vrev(channel::HHChannel) = channel.Vsteady\n\nGet the reversal potential.\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.ab_generalized-Tuple{Any, Any}","page":"Hodgkin Huxley models","title":"LaskaML.hh.ab_generalized","text":"ab_generalized(V, p)\n\nThe generalized form of α and β.\n\nfunction ab_generalized(V, p)\n    A, B, C, D, F, H = p\n    (A + B * V) / (C + H * exp((V + D) / F))\nend\n\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.alpha_h-Tuple{LaskaML.hh.HHChannel}","page":"Hodgkin Huxley models","title":"LaskaML.hh.alpha_h","text":"alpha_h(channel::HHChannel)\n\nGet the function for lpha_h bound to a HHChannel.\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.alpha_m-Tuple{LaskaML.hh.HHChannel}","page":"Hodgkin Huxley models","title":"LaskaML.hh.alpha_m","text":"alpha_m(channel::HHChannel) = channel.α_m\n\nGet the function for lpha_m bound to a HHChannel.\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.beta_h-Tuple{LaskaML.hh.HHChannel}","page":"Hodgkin Huxley models","title":"LaskaML.hh.beta_h","text":"beta_h(channel::HHChannel)\n\nGet the function for eta_h bound to a HHChannel.\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.beta_m-Tuple{LaskaML.hh.HHChannel}","page":"Hodgkin Huxley models","title":"LaskaML.hh.beta_m","text":"beta_m(channel::HHChannel)\n\nGet the function for eta_m bound to a HHChannel.\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.buildd0-Union{Tuple{LaskaML.hh.HHModel{G, V, P, Q}}, Tuple{Q}, Tuple{P}, Tuple{V}, Tuple{G}} where {G<:Number, V<:Number, P<:Number, Q<:Number}","page":"Hodgkin Huxley models","title":"LaskaML.hh.buildd0","text":"buildd0(model::HHModel{G,V,P,Q}) where {G<:Number, V<:Number, P<:Number, Q<:Number}\n\nConstruct the initial conditions as well as the functions for fracdmdv and/or fracdhdv for each channel.\n\nReturns a Tuple consisting of:\n\nA Vector of the functions mentioned above.\nA Vector of the initial conditions.\nA Vector containing Strings identifying the functions.\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.buildexpression-Union{Tuple{LaskaML.hh.HHModel{G, V, P, Q}}, Tuple{Q}, Tuple{P}, Tuple{V}, Tuple{G}} where {G<:Number, V<:Number, P<:Number, Q<:Number}","page":"Hodgkin Huxley models","title":"LaskaML.hh.buildexpression","text":"buildexpression(model::HHModel{G,V,P,Q}) where {G<:Number, V<:Number, P<:Number, Q<:Number}\n\nBuild a string representation of the expression:\n\nI = barg_xm_x^ph_x^q(V_M-V_x) + barg_ym_y^ph_y^q(V_M-V_y) + barg_zm_z^ph_z^q(V_M-V_z)\n\nUsing all HHChannels in the model. If the exponents p or q of a HHChannel is zero their respective term (m or h) will not be included.\n\nExamples\n\njulia> # Example potassium channel\n           chanK = LaskaML.hh.hhchannel(\n               \"K\",\n               35.0,\n               -77.0,\n               alpha_m=alpha_n,\n               beta_m=beta_n,\n               p=4,\n               alpha_h=alpha_h,\n               beta_h=beta_h,\n               q=0\n           )\nLaskaML.hh.HHChannel{Float64, Float64, Int64, Int64}(\"K\", 35.0, -77.0, alpha_n, beta_n, 4, alpha_h, beta_h, 0)\n\njulia> # Example sodium channel\n           chanNa = LaskaML.hh.hhchannel(\n               \"Na\",\n               40.0,\n               55.0,\n               alpha_m=alpha_m,\n               beta_m=beta_m,\n               p=3,\n               alpha_h=alpha_h,\n               beta_h=beta_h,\n               q=1\n           )\nLaskaML.hh.HHChannel{Float64, Float64, Int64, Int64}(\"Na\", 40.0, 55.0, alpha_m, beta_m, 3, alpha_h, beta_h, 1)\n\njulia> chanL = LaskaML.hh.hhchannel(\n               \"L\",\n               0.3,\n               -65.0\n           )\nLaskaML.hh.HHChannel{Float64, Float64, Int64, Int64}(\"L\", 0.3, -65.0, nothing, nothing, 0, nothing, nothing, 0)\n\n\njulia> model = chanNa + chanK + chanL # Combine channels into a HHModel\nLaskaML.hh.HHModel{Float64, Float64, Int64, Int64}(LaskaML.hh.HHChannel{Float64, Float64, Int64, Int64}[LaskaML.hh.HHChannel{Float64, Float64, Int64, Int64}(\"Na\", 40.0, 55.0, alpha_m, beta_m, 3, alpha_h, beta_h, 1), LaskaML.hh.HHChannel{Float64, Float64, Int64, Int64}(\"K\", 35.0, -77.0, alpha_n, beta_n, 4, alpha_h, beta_h, 0), LaskaML.hh.HHChannel{Float64, Float64, Int64, Int64}(\"L\", 0.3, -65.0, nothing, nothing, 0, nothing, nothing, 0)])\nnel{Float64, Float64, Int64, Int64}(\"L\", 0.3, -65.0, nothing, nothing, 0, nothing, nothing, 0)\n\njulia> LaskaML.hh.buildexpression(model) # Build String expression from model.\n\"(g_Na*(m_Na^3)*h_Na*(v-E_Na))+(g_K*(m_K^4)*(v-E_K))+(g_L*(v-E_L))\"\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.buildmodel-Union{Tuple{LaskaML.hh.HHModel{G, V, P, Q}}, Tuple{Q}, Tuple{P}, Tuple{V}, Tuple{G}} where {G<:Number, V<:Number, P<:Number, Q<:Number}","page":"Hodgkin Huxley models","title":"LaskaML.hh.buildmodel","text":"buildmodel(model::HHModel{G,V,P,Q}) where {G<:Number, V<:Number, P<:Number, Q<:Number}\n\nReturns a Tuple containing all parts necessary for constructing an ODEProblem of the model except the time span:\n\nA mutating function accepting the parameters du, u, p, t\nThe initial conditions of the model\nThe parameters of the model\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.buildparams-Union{Tuple{LaskaML.hh.HHModel{G, V, P, Q}}, Tuple{Q}, Tuple{P}, Tuple{V}, Tuple{G}} where {G<:Number, V<:Number, P<:Number, Q<:Number}","page":"Hodgkin Huxley models","title":"LaskaML.hh.buildparams","text":"buildparams(model::HHModel{G,V,P,Q}) where {G<:Number, V<:Number, P<:Number, Q<:Number}\n\nreturns the initial parameters of the model as well as a Vector{String} of their identifiers.\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.buildterm-Union{Tuple{T}, Tuple{String, String, T}} where T<:Number","page":"Hodgkin Huxley models","title":"LaskaML.hh.buildterm","text":"function buildterm(variable::String, id::String, exponent::T) where T<:Number\n\nBuild a String representation of m^p or h^q. If the exponent of either term is 0 it is not included.\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.conductance-Tuple{LaskaML.hh.HHChannel}","page":"Hodgkin Huxley models","title":"LaskaML.hh.conductance","text":"conductance(channel::HHChannel)\n\nGet the maximum conductance, barg, of a HHChannel.\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.dhdv-Tuple{LaskaML.hh.HHChannel}","page":"Hodgkin Huxley models","title":"LaskaML.hh.dhdv","text":" function dhdv(channel::HHChannel)\n\nReturns a function giving dh/dv according to:\n\nfracdhdv = alpha(v)(10 - h) - beta(v)h\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.dmdv-Tuple{LaskaML.hh.HHChannel}","page":"Hodgkin Huxley models","title":"LaskaML.hh.dmdv","text":" function dmdv(channel::HHChannel)\n\nReturns a function giving dm/dv according to:\n\nfracdmdv = alpha(v)(10 - m) - beta(v)m\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.h_exponent-Tuple{LaskaML.hh.HHChannel}","page":"Hodgkin Huxley models","title":"LaskaML.hh.h_exponent","text":"h_exponent(channel::HHChannel)\n\nGet the exponent of h in a HHChannel.\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.h_inf-Tuple{LaskaML.hh.HHChannel}","page":"Hodgkin Huxley models","title":"LaskaML.hh.h_inf","text":"h_inf(channel::HHChannel)\n\nGet the function for steady state of h.\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.hhchannel-Union{Tuple{Q}, Tuple{P}, Tuple{V}, Tuple{G}, Tuple{Any, G, V}} where {G<:Number, V<:Number, P<:Number, Q<:Number}","page":"Hodgkin Huxley models","title":"LaskaML.hh.hhchannel","text":"hhchannel(\nid,\ng::T,\nVsteady::T;\nalpha_m=() -> oneunit(T),\nbeta_m=() -> oneunit(T),\np=zero(T),\nalpha_h=() -> oneunit(T),\nbeta_h=() -> oneunit(T),\nq=zero(T)\n) where T<:Number\n\nOuter constructor of HHChannel. If not specified, exponents of m and h will be 0 while unspecified α and β functions will be initialized as nothing.\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.id-Tuple{LaskaML.hh.HHChannel}","page":"Hodgkin Huxley models","title":"LaskaML.hh.id","text":"id(channel::HHChannel)\n\nGet the identifier of a HHChannel.\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.m_exponent-Tuple{LaskaML.hh.HHChannel}","page":"Hodgkin Huxley models","title":"LaskaML.hh.m_exponent","text":"m_exponent(channel::HHChannel)\n\nGet the exponent of m in a HHChannel\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.m_inf-Tuple{LaskaML.hh.HHChannel}","page":"Hodgkin Huxley models","title":"LaskaML.hh.m_inf","text":"m_inf(channel::HHChannel)\n\nGet the function for steady state of m.\n\n\n\n\n\n","category":"method"},{"location":"ref/hhref/#LaskaML.hh.parsechannel-Tuple{LaskaML.hh.HHChannel}","page":"Hodgkin Huxley models","title":"LaskaML.hh.parsechannel","text":"parsechannel(channel::HHChannel)\n\nParse a HHChannel struct into an expression in the form of a String suitable for use in DifferentialEquations.\n\nExamples\n\njulia> chanK = LaskaML.hh.hhchannel(\n               \"K\",\n               35.0,\n               -77.0,\n               alpha_m=alpha_n,\n               beta_m=beta_n,\n               p=4,\n               alpha_h=alpha_h,\n               beta_h=beta_h,\n               q=0\n           )\nLaskaML.hh.HHChannel{Float64, Int64}(\"K\", 35.0, -77.0, alpha_n, beta_n, 4, alpha_h, beta_h, 0)\n\njulia> LaskaML.hh.parsechannel(chanK)\n\"(gK*(m_K^4)*(v-E_K))\"\n\n\n\n\n\n","category":"method"},{"location":"ref/structs/#Structs-and-their-Interfaces","page":"Structs & their interfaces","title":"Structs and their Interfaces","text":"","category":"section"},{"location":"ref/structs/#Abstract-types","page":"Structs & their interfaces","title":"Abstract types","text":"","category":"section"},{"location":"ref/structs/#AbstractExperiment","page":"Structs & their interfaces","title":"AbstractExperiment","text":"","category":"section"},{"location":"ref/structs/","page":"Structs & their interfaces","title":"Structs & their interfaces","text":"LaskaCore.AbstractExperiment{T}","category":"page"},{"location":"ref/structs/#LaskaCore.AbstractExperiment","page":"Structs & their interfaces","title":"LaskaCore.AbstractExperiment","text":"abstract type AbstractExperiment{T} end\n\nParent type to concrete types representing entire experiments containing their specifications, metadata and clusters.\n\n\n\n\n\n","category":"type"},{"location":"ref/structs/#Interfaces","page":"Structs & their interfaces","title":"Interfaces","text":"","category":"section"},{"location":"ref/structs/","page":"Structs & their interfaces","title":"Structs & their interfaces","text":"The following functions provide interfaces to all structs that are children of LaskaCore.AbstractExperiment.","category":"page"},{"location":"ref/structs/","page":"Structs & their interfaces","title":"Structs & their interfaces","text":"LaskaCore.clusterids","category":"page"},{"location":"ref/structs/#LaskaCore.clusterids","page":"Structs & their interfaces","title":"LaskaCore.clusterids","text":"clusterids(experiment::T) where {T<:AbstractExperiment}\n\nReturns a Vector of all cluster id:s present in experiment.\n\n\n\n\n\n","category":"function"},{"location":"ref/structs/","page":"Structs & their interfaces","title":"Structs & their interfaces","text":"LaskaCore.getcluster","category":"page"},{"location":"ref/structs/#LaskaCore.getcluster","page":"Structs & their interfaces","title":"LaskaCore.getcluster","text":"getcluster(experiment::T, cluster::Int) where {T<:AbstractExperiment}\n\nReturns a cluster from experiment.\n\n\n\n\n\n","category":"function"},{"location":"ref/structs/","page":"Structs & their interfaces","title":"Structs & their interfaces","text":"LaskaCore.clustervector","category":"page"},{"location":"ref/structs/#LaskaCore.clustervector","page":"Structs & their interfaces","title":"LaskaCore.clustervector","text":"clustervector(experiment::T) where {T<:AbstractExperiment}\n\nReturns a Vector{T} where T<:AbstractCluster containing all clusters in experiment.\n\n\n\n\n\n","category":"function"},{"location":"ref/structs/","page":"Structs & their interfaces","title":"Structs & their interfaces","text":"LaskaCore.getmeta","category":"page"},{"location":"ref/structs/#LaskaCore.getmeta","page":"Structs & their interfaces","title":"LaskaCore.getmeta","text":"getmeta(experiment::T, entry::String) where {T<:AbstractExperiment}\ngetmeta(experiment::T) where {T<:AbstractExperiment}\n\nReturns experiment meta info from spikeGLX. If an entry string is not supplied all entries are returned.\n\n\n\n\n\n","category":"function"},{"location":"ref/structs/","page":"Structs & their interfaces","title":"Structs & their interfaces","text":"LaskaCore.triggertimes","category":"page"},{"location":"ref/structs/#LaskaCore.triggertimes","page":"Structs & their interfaces","title":"LaskaCore.triggertimes","text":"triggertimes(experiment::T) where {T<:AbstractExperiment}\n\nReturns the timestamps of trigger events in experiment.\n\n\n\n\n\n","category":"function"},{"location":"ref/structs/","page":"Structs & their interfaces","title":"Structs & their interfaces","text":"LaskaCore.ntrigs","category":"page"},{"location":"ref/structs/#LaskaCore.ntrigs","page":"Structs & their interfaces","title":"LaskaCore.ntrigs","text":"ntrigs(experiment::T) where {T<:AbstractExperiment}\n\nReturns the number of trigger events in experiment.\n\n\n\n\n\n","category":"function"},{"location":"ref/structs/#AbstractCluster","page":"Structs & their interfaces","title":"AbstractCluster","text":"","category":"section"},{"location":"ref/structs/","page":"Structs & their interfaces","title":"Structs & their interfaces","text":"LaskaCore.AbstractCluster{T}","category":"page"},{"location":"ref/structs/#LaskaCore.AbstractCluster","page":"Structs & their interfaces","title":"LaskaCore.AbstractCluster","text":"abstract type AbstractCluster{T} end\n\nParent type to concrete types representing single clusters.\n\n\n\n\n\n","category":"type"},{"location":"ref/structs/#Interfaces-2","page":"Structs & their interfaces","title":"Interfaces","text":"","category":"section"},{"location":"ref/structs/","page":"Structs & their interfaces","title":"Structs & their interfaces","text":"The following functions provide interfaces to all structs that are children of Laska.AbstractCluster.","category":"page"},{"location":"ref/structs/","page":"Structs & their interfaces","title":"Structs & their interfaces","text":"LaskaCore.id\nLaskaCore.nspikes\nLaskaCore.info\nLaskaCore.spiketimes","category":"page"},{"location":"ref/structs/#LaskaCore.id","page":"Structs & their interfaces","title":"LaskaCore.id","text":"id(cluster::T) where {T<:AbstractCluster}\n\nReturns the id of cluster\n\n\n\n\n\n","category":"function"},{"location":"ref/structs/#LaskaCore.nspikes","page":"Structs & their interfaces","title":"LaskaCore.nspikes","text":"nspikes(cluster::T) where {T<:AbstractCluster}\n\nReturns the number of spikes (length of the spiketimes field) of Cluster.\n\n\n\n\n\n","category":"function"},{"location":"ref/structs/#LaskaCore.info","page":"Structs & their interfaces","title":"LaskaCore.info","text":"info(cluster::T) where {T<:AbstractCluster}\n\nReturns info (as dict) about cluster. A string may be supplied to return a specific entry (as Float64).\n\n\n\n\n\ninfo(experiment::T) where {T<:AbstractExperiment}\ninfo(experiment::T, var) where {T<:AbstractExperiment}\n\nReturns the cluster_info.tsv attached to the experiment in the form of a DataFrame. If var is provided returns a Vector of the matching column.\n\n\n\n\n\n","category":"function"},{"location":"ref/structs/#LaskaCore.spiketimes","page":"Structs & their interfaces","title":"LaskaCore.spiketimes","text":"spiketimes(cluster::Cluster::T) where {T<:AbstractCluster}\n\nReturns the spiketimes of cluster.\n\n\n\n\n\nspiketimes(experiment::PhyOutput)\n\nGet all spiketimes in experiment. Spiketimes are not sorted.\n\n\n\n\n\nfunction spiketimes(experiment::RelativeSpikes{T}) where T\n\nGet all spiketimes of experiment.\n\n\n\n\n\n","category":"function"},{"location":"ref/structs/#Concrete-types","page":"Structs & their interfaces","title":"Concrete types","text":"","category":"section"},{"location":"ref/structs/#\"Experiment\"-wrappers","page":"Structs & their interfaces","title":"\"Experiment\" wrappers","text":"","category":"section"},{"location":"ref/structs/","page":"Structs & their interfaces","title":"Structs & their interfaces","text":"This section describes concrete types for holding entire experiments including their clusters and metadata.","category":"page"},{"location":"ref/structs/#PhyOutput","page":"Structs & their interfaces","title":"PhyOutput","text":"","category":"section"},{"location":"ref/structs/","page":"Structs & their interfaces","title":"Structs & their interfaces","text":"LaskaCore.PhyOutput","category":"page"},{"location":"ref/structs/#LaskaCore.PhyOutput","page":"Structs & their interfaces","title":"LaskaCore.PhyOutput","text":"mutable struct PhyOutput{T} <: AbstractExperiment{T}\n    clusterids::Vector{Int64}\n    clusters::Vector{Cluster{T}}\n    trigtimes::Vector{T}\n    meta::Dict{SubString{String},SubString{String}}\nend\n\nStruct for holding Kilosort output preprocessed in Phy. Should be instantiated using the outer constructor LaskaCore.importphy.\n\nDirect field access is not recommended. Basic interface functions include:\n\nLaskaCore.clusterids – Returns all cluster ID:s as a Vector.\nLaskaCore.getcluster – Returns a specific LaskaCore.Cluster.\nLaskaCore.clustervector – Returns all LaskaCore.Cluster:s.\nLaskaCore.getmeta – Returns the spikeGLX meta as a dict or a specific entry.\nLaskaCore.triggertimes – Returns the trigger event times.\nLaskaCore.ntrigs – Returns the length of the trigger event time Vector.\n\n\n\n\n\n","category":"type"},{"location":"ref/structs/#RelativeSpikes","page":"Structs & their interfaces","title":"RelativeSpikes","text":"","category":"section"},{"location":"ref/structs/","page":"Structs & their interfaces","title":"Structs & their interfaces","text":"LaskaCore.RelativeSpikes","category":"page"},{"location":"ref/structs/#LaskaCore.RelativeSpikes","page":"Structs & their interfaces","title":"LaskaCore.RelativeSpikes","text":"mutable struct RelativeSpikes{T} <: AbstractExperiment{T}\n    clusterids::Vector{Int64}\n    clusters::Vector{RelativeCluster{T}}\n    trigtimes::Vector{T}\n    meta::Dict{SubString{String},SubString{String}}\n    info::DataFrame\n    stimtrain::Dict{String,T}\n    specs::Dict{String,T}\nend\n\nSimilar to LaskaCore.PhyOutput. However, instead of LaskaCore.Clusters, LaskaCore.RelativeClusters are used. In these, spiketimes relative to trigger event(s) instead of absolute spiketimes are used.               Additionally contains the fields:\n\nstimtrain::Dict{String,T} – Dict in the format name/id => time. time should be relative to trigger event. Specified by the user on creation of struct using LaskaCore.relativespikes.\nspecs::Dict{String,T} – Dict containing the time before/after (back/forward) trigger events that spikes are included; as well as number of trigger events (ntrig).\n\n\n\n\n\n","category":"type"},{"location":"ref/structs/#Interfaces-3","page":"Structs & their interfaces","title":"Interfaces","text":"","category":"section"},{"location":"ref/structs/","page":"Structs & their interfaces","title":"Structs & their interfaces","text":"Interfaces only for use with LaskaCore.RelativeSpikes.","category":"page"},{"location":"ref/structs/","page":"Structs & their interfaces","title":"Structs & their interfaces","text":"LaskaCore.relativespecs","category":"page"},{"location":"ref/structs/#LaskaCore.relativespecs","page":"Structs & their interfaces","title":"LaskaCore.relativespecs","text":"relativespecs(rel::RelativeSpikes{T}) where {T<:Real}\nrelativespecs(rel::RelativeSpikes{T}, spec::String) where {T<:Real}\n\nReturns a Dict containing the 'specs' of a RelativeSpikes struct.                          Includes the back and forward variables used as well as the number of trigger events (ntrigs).\n\n\n\n\n\n","category":"function"},{"location":"ref/structs/","page":"Structs & their interfaces","title":"Structs & their interfaces","text":"LaskaCore.stimtimes","category":"page"},{"location":"ref/structs/#LaskaCore.stimtimes","page":"Structs & their interfaces","title":"LaskaCore.stimtimes","text":"stimtimes(experiment::RelativeSpikes)\n\nReturns a dict containing the stimtrain of a RelativeSpikes struct in the form of label => time.\n\n\n\n\n\n","category":"function"},{"location":"ref/structs/#Single-cluster-wrappers","page":"Structs & their interfaces","title":"Single cluster wrappers","text":"","category":"section"},{"location":"ref/structs/#Cluster","page":"Structs & their interfaces","title":"Cluster","text":"","category":"section"},{"location":"ref/structs/","page":"Structs & their interfaces","title":"Structs & their interfaces","text":"LaskaCore.Cluster","category":"page"},{"location":"ref/structs/#LaskaCore.Cluster","page":"Structs & their interfaces","title":"LaskaCore.Cluster","text":"struct Cluster{T} <: AbstractCluster{T}\n    id::Int64\n    info::SubDataFrame\n    spiketimes::Vector{T}\nend\n\nStruct for holding a single Cluster.\n\nDirect field access is not recommended. Basic interface functions include:\n\nLaskaCore.id – Returns the Cluster id.\nLaskaCore.nspikes – Returns the number of spikes in the cluster (Based off length of the spiketimes field).\nLaskaCore.info – Returns the info of the Cluster from \"cluster_info.tsv\" as a DataFrame row. This is a view of the DataFrame in the parent Experiment.\nLaskaCore.spiketimes – Returns a Vector containing all spiketimes of the Cluster.\n\n\n\n\n\n","category":"type"},{"location":"ref/structs/#RelativeCluster","page":"Structs & their interfaces","title":"RelativeCluster","text":"","category":"section"},{"location":"ref/structs/","page":"Structs & their interfaces","title":"Structs & their interfaces","text":"LaskaCore.RelativeCluster","category":"page"},{"location":"ref/structs/#LaskaCore.RelativeCluster","page":"Structs & their interfaces","title":"LaskaCore.RelativeCluster","text":"struct RelativeCluster{T} <: AbstractCluster{T}\n    id::Int64\n    info::SubDataFrame\n    spiketimes::Vector{Vector{T}}\nend\n\nStruct for holding a cluster and its spiketimes relative to triggers.        Similar to Cluster{T} except that the field spiketimes is a Vector{Vector{T}} where each vector represents trigger #n.\n\nDirect field access is not recommended. Basic interface functions include:\n\nLaskaCore.id – Returns the Cluster id.\nLaskaCore.nspikes – Returns the number of spikes in the cluster (Based off length of the spiketimes field).\nLaskaCore.info – Returns the info of the Cluster from \"cluster_info.tsv\" as a SubDataFrame. This is a view of the info DataFrame from the parent Experiment.\nLaskaCore.spiketimes – Returns a Vector containing all spiketimes of the Cluster.\n\n\n\n\n\n","category":"type"},{"location":"ref/filters/#Filtering","page":"Filter data","title":"Filtering","text":"","category":"section"},{"location":"ref/filters/","page":"Filter data","title":"Filter data","text":"This section covers functions which filters clusters or spikes in some way.","category":"page"},{"location":"ref/filters/#By-depth","page":"Filter data","title":"By depth","text":"","category":"section"},{"location":"ref/filters/","page":"Filter data","title":"Filter data","text":"LaskaCore.spikesatdepth","category":"page"},{"location":"ref/filters/#LaskaCore.spikesatdepth","page":"Filter data","title":"LaskaCore.spikesatdepth","text":"spikesatdepth(experiment::E{T}, depth::N) where {E<:AbstractExperiment,T<:Real,N<:Real}\nspikesatdepth(experiment::E{T}, depth::Tuple{2,N}) where {E<:AbstractExperiment,T<:Real,N<:Real}\nspikesatdepth(experiment::E{T}, depth::Set{N}) where {E<:AbstractExperiment,T<:Real,N<:Real}\n\nReturns a Vector{T} of all spiketimes at/in depth.\n\nThe included depths are controlled by the type of the depth variable:                 \n\nA single number returns only the spikes of clusters at that exact depth.                  \nA Tuple with 2 entries returns all clusters at depths between (and including) the values.                  \nA Set returns the clusters with the exact depths in the Set.\n\n\n\n\n\n","category":"function"},{"location":"ref/import/#Import-data","page":"Importing data","title":"Import data","text":"","category":"section"},{"location":"ref/import/#Phy-output-data","page":"Importing data","title":"Phy output data","text":"","category":"section"},{"location":"ref/import/","page":"Importing data","title":"Importing data","text":"importphy","category":"page"},{"location":"ref/import/#LaskaCore.importphy","page":"Importing data","title":"LaskaCore.importphy","text":"importphy(phydir::String, glxdir::String, triggerpath::String; includemua::Bool=false)\nimportphy(phydir::String, filters::Tuple{Symbol,Function}, glxdir::String=\"\", triggerpath::String=\"\"; includemua::Bool=false)\nimportphy(phydir::String, filters::Tuple{Tuple{Symbol,Function}}, glxdir::String=\"\", triggerpath::String=\"\"; includemua::Bool=false)\n\nImport Kilosort output processed in Phy. Spiketimes are sorted.\n\nBy default, only \"good\" clusters as per phy output are included. Setting includemua=true will include \"mua\" clusters as well as unclassified.             Clusters may be further filtered based on any variable in \"cluster_info.tsv\". This is done by including a Tuple with the column to be filtered as a symbol and a filtering function. Several Tuples containing such filters may be included by wrapping them in a Tuple.         \n\nExample\n\n# Removes any cluster with a mean firing rate less than 1:\n\n# A function returning true if x > 1\nfunction filterfunc(x::Float64)\n    return x > 1\nend\n\n# A tuple with the above function (filterfunc) and the column to which it should be\n# applied (:fr).\nfiltertuple = (:fr, filterfunc)\n\nresult = importphy(\"phyoutput_directory\", filtertuple, \"glxoutput_directory\", \"direct_path_to_triggerfile\")\n\n\n\n\n\n","category":"function"},{"location":"ref/import/#SpikeGLX","page":"Importing data","title":"SpikeGLX","text":"","category":"section"},{"location":"ref/import/","page":"Importing data","title":"Importing data","text":"Functions for importing and parsing spikeGLX binary and meta files.","category":"page"},{"location":"ref/import/","page":"Importing data","title":"Importing data","text":"spikemmap\nparseglxmeta","category":"page"},{"location":"ref/import/#LaskaCore.spikemmap","page":"Importing data","title":"LaskaCore.spikemmap","text":"spikemmap(file::String, nchans::Int, filesizebytes::Int)\nspikemmap(file::String, meta::Dict{Substring{String}, SubString{String}})\n\nCreate a memory map of a spikeGLX .bin file. Requires a path to the file, the number of channels and the file size in bytes.               The easiest way to provide this is to pass a parsed .meta file.\n\n\n\n\n\n","category":"function"},{"location":"ref/import/#LaskaCore.parseglxmeta","page":"Importing data","title":"LaskaCore.parseglxmeta","text":"parseglxmeta(file::String)\n\nParses a spikeGLX .meta file into a Dict.\n\n\n\n\n\n","category":"function"},{"location":"ref/import/","page":"Importing data","title":"Importing data","text":"tovolts","category":"page"},{"location":"ref/import/#LaskaCore.tovolts","page":"Importing data","title":"LaskaCore.tovolts","text":"tovolts(in::Matrix{Int16}, meta::Dict{SubString{String},SubString{String}})\n\nConvert a Vector/Matrix of raw spikeGLX Int16 data to volts.\n\n\n\n\n\n","category":"function"},{"location":"ref/import/","page":"Importing data","title":"Importing data","text":"LaskaCore.importchanint16bin\nLaskaCore.importchanint16csv","category":"page"},{"location":"ref/import/#LaskaCore.importchanint16bin","page":"Importing data","title":"LaskaCore.importchanint16bin","text":"importchanint16bin(path::String)\n\nImport a .bin file containing a SINGLE channel.\n\n\n\n\n\n","category":"function"},{"location":"ref/import/#LaskaCore.importchanint16csv","page":"Importing data","title":"LaskaCore.importchanint16csv","text":"importchanint16csv(path::String)\n\nImport a .csv file containing a SINGLE channel.\n\n\n\n\n\n","category":"function"},{"location":"ref/import/","page":"Importing data","title":"Importing data","text":"LaskaCore.gettrig","category":"page"},{"location":"ref/import/#LaskaCore.gettrig","page":"Importing data","title":"LaskaCore.gettrig","text":"gettrig(t::Vector{T}) where {T<:Real}\n\nExtract trigger event indices.\n\nAssumes that t is 0 except at trigger events. Returns only the first index at each trigger event(ie series of sequential nonzero indices).\n\nExample\n\n\n# Example \"triggerchannel\"\n# * = Indices that will be returned, ^ = trigger\n#\n\n#            *                 *\nv = [0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1]\n#            ^ ^ ^ ^           ^ ^ ^ ^ ^ ^ \n\nLaskaCore.gettrig(v)\n\n\n\n\n\n","category":"function"},{"location":"ref/helpers/#Helpers","page":"Helpers","title":"Helpers","text":"","category":"section"},{"location":"ref/helpers/","page":"Helpers","title":"Helpers","text":"This section describes general helper functions that does not fit under other, more specific headings.","category":"page"},{"location":"ref/helpers/","page":"Helpers","title":"Helpers","text":"using Laska","category":"page"},{"location":"ref/helpers/#Helpers-2","page":"Helpers","title":"Helpers","text":"","category":"section"},{"location":"ref/helpers/#Rounding","page":"Helpers","title":"Rounding","text":"","category":"section"},{"location":"ref/helpers/","page":"Helpers","title":"Helpers","text":"Functions for \"rounding\" numbers to arbitrary intervals.","category":"page"},{"location":"ref/helpers/","page":"Helpers","title":"Helpers","text":"LaskaCore.roundup","category":"page"},{"location":"ref/helpers/#LaskaCore.roundup","page":"Helpers","title":"LaskaCore.roundup","text":"roundup(value::T, interval::N) where T<:Real where N<:Real\n\nRounds value up to the nearest greater multiple of interval.\n\n\n\n\n\n","category":"function"},{"location":"ref/helpers/#Examples","page":"Helpers","title":"Examples","text":"","category":"section"},{"location":"ref/helpers/","page":"Helpers","title":"Helpers","text":"LaskaCore.roundup(12, 30)\nLaskaCore.roundup(12, 23)\nLaskaCore.roundup(12.5, 1)\nLaskaCore.roundup(17, 3.8)","category":"page"},{"location":"ref/helpers/","page":"Helpers","title":"Helpers","text":"LaskaCore.rounddown","category":"page"},{"location":"ref/helpers/#LaskaCore.rounddown","page":"Helpers","title":"LaskaCore.rounddown","text":"rounddown(value::T, interval::N) where {T<:Real} where {N<:Real}\n\nRounds value down to the nearest lesser multiple of interval.\n\n\n\n\n\n","category":"function"},{"location":"ref/helpers/#Examples-2","page":"Helpers","title":"Examples","text":"","category":"section"},{"location":"ref/helpers/","page":"Helpers","title":"Helpers","text":"LaskaCore.rounddown(12, 30)\nLaskaCore.rounddown(12, 23)\nLaskaCore.rounddown(12.5, 1)\nLaskaCore.rounddown(17, 3.8)","category":"page"},{"location":"ref/helpers/","page":"Helpers","title":"Helpers","text":"LaskaCore.arbitraryround","category":"page"},{"location":"ref/helpers/#LaskaCore.arbitraryround","page":"Helpers","title":"LaskaCore.arbitraryround","text":"arbitraryround(value::T, interval::N) where {T<:Real} where {N<:Real}\n\nRounds value to the nearest multiple of interval.\n\n\n\n\n\n","category":"function"},{"location":"ref/helpers/#Examples-3","page":"Helpers","title":"Examples","text":"","category":"section"},{"location":"ref/helpers/","page":"Helpers","title":"Helpers","text":"LaskaCore.arbitraryround(12, 30)\nLaskaCore.arbitraryround(12, 23)\nLaskaCore.arbitraryround(12.5, 1)\nLaskaCore.arbitraryround(17, 3.8)","category":"page"},{"location":"ref/helpers/#Unit-conversions","page":"Helpers","title":"Unit conversions","text":"","category":"section"},{"location":"ref/helpers/","page":"Helpers","title":"Helpers","text":"Functions for converting between different units.","category":"page"},{"location":"ref/helpers/#Time","page":"Helpers","title":"Time","text":"","category":"section"},{"location":"ref/helpers/","page":"Helpers","title":"Helpers","text":"LaskaCore.mstosamplerate\nLaskaCore.sampleratetoms","category":"page"},{"location":"#Laska.jl-documentation","page":"Home","title":"Laska.jl documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the WIP documentation for the WIP package Laska.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Laska.jl is an attempt at providing functions for importing, manipulating and visualizing data obtained from Neuropixel probes using spikeGLX and preprocessed in KiloSort and Phy.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package is currently divided into:","category":"page"},{"location":"","page":"Home","title":"Home","text":"LaskaCore: Types, importing data, basic summary statistics\nLaskaStats: Summary statistics and similar.\nLaskaPlot: Plotting functions using Makie.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Importing Laska will include all of the above and reexport their functions.","category":"page"}]
}
