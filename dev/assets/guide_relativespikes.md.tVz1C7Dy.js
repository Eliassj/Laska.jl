import{_ as s,c as i,o as a,a6 as e}from"./chunks/framework.Dp6owxBf.js";const u=JSON.parse('{"title":"Filter spikes around triggers","description":"","frontmatter":{},"headers":[],"relativePath":"guide/relativespikes.md","filePath":"guide/relativespikes.md","lastUpdated":null}'),t={name:"guide/relativespikes.md"},n=e(`<h1 id="Filter-spikes-around-triggers" tabindex="-1">Filter spikes around triggers <a class="header-anchor" href="#Filter-spikes-around-triggers" aria-label="Permalink to &quot;Filter spikes around triggers {#Filter-spikes-around-triggers}&quot;">​</a></h1><p>Filtering an entire experiment, only keeping spikes around triggers/events, can be accomplished using <a href="/Laska.jl.git/dev/ref/core_ref#LaskaCore.relativespikes-Union{Tuple{Y}, Tuple{S}, Tuple{M}, Tuple{V}, Tuple{U}, Tuple{T}, Tuple{PhyOutput{T, U, M, S}, Dict{String, V}, Y, Y}} where {T, U, V, M, S&lt;:(Vector{&lt;:Integer}), Y&lt;:Real}"><code>LaskaCore.relativespikes</code></a>. This function returns a <a href="/Laska.jl.git/dev/ref/core_ref#LaskaCore.RelativeSpikes"><code>LaskaCore.RelativeSpikes</code></a>-struct which is similar to a <a href="/Laska.jl.git/dev/ref/core_ref#LaskaCore.PhyOutput"><code>LaskaCore.PhyOutput</code></a>-struct with a few differences. Most importantly, instead of as <a href="/Laska.jl.git/dev/ref/core_ref#LaskaCore.Cluster"><code>LaskaCore.Cluster</code></a>, individual cells are represented as <a href="/Laska.jl.git/dev/ref/core_ref#LaskaCore.RelativeCluster"><code>LaskaCore.RelativeCluster</code></a>s. Instead of a single vector of sequential spiketimes the <code>RelativeCluster</code> holds a vector of vectors. Each sub-vector represents one trigger event and holds all spiketimes surrounding that event. Spiketimes are also converted to be represented as relative to each event instead of absolute time from recording start.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><p>In a classical conditioning experiment, one might apply a conditioned stimulation (CS) followed by an unconditioned stimulation (US) several times over the course of an experiment. Filtering the data and specifying the experimental setup for further visualization and/or analysis may be done in the following manner:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LaskaCore</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># In order to specify times in seconds/milliseconds instead of the recording samplerate</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unitful</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Import our data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data_raw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> importphy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/phyoutput&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/glxmeta&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/triggerchannel.bin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Filter all spikes and create a RelativeSpikes struct</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data_filtered </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> relativespikes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data_raw,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Pass a \`Dict\` describing the stimulations. Here, &quot;CS&quot; occurs</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # at the trigger and &quot;US&quot; occurs 300ms following the trigger.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;CS&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;US&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 300</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ms&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    1000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Amount of time before each trigger to include</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    1500</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ms&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Amount of time after each trigger to include</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,5),l=[n];function r(p,h,k,o,d,c){return a(),i("div",null,l)}const E=s(t,[["render",r]]);export{u as __pageData,E as default};
