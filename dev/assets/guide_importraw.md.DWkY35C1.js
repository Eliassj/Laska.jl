import{_ as a,c as s,o as i,a6 as e}from"./chunks/framework.DJ4Mgv9l.js";const m=JSON.parse('{"title":"Importing raw Neuropixels data","description":"","frontmatter":{},"headers":[],"relativePath":"guide/importraw.md","filePath":"guide/importraw.md","lastUpdated":null}'),t={name:"guide/importraw.md"},n=e(`<h1 id="Importing-raw-Neuropixels-data" tabindex="-1">Importing raw Neuropixels data <a class="header-anchor" href="#Importing-raw-Neuropixels-data" aria-label="Permalink to &quot;Importing raw Neuropixels data {#Importing-raw-Neuropixels-data}&quot;">​</a></h1><p>Importing raw channels as recorded with the Neuropixels probes may be done with the <a href="/Laska.jl/dev/ref/core_ref#LaskaCore.importglx-Tuple{String, Any, Any, Any}"><code>LaskaCore.importglx</code></a> function. In order to read the file correctly some information such as the total number of channels in the recording is required. This is most easily provided by passing a parsed SpikeGLX .meta file to the function.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">meta </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LaskaCore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">parseglxmeta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/metafile.ap.meta&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data_raw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LaskaCore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">importglx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/raw/data.ap.bin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                               1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">320</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Channel indices to include</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                               60_000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120_000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Time indices to include</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               meta)</span></span></code></pre></div><p>In the example above, we first import and parse a .meta file using the <code>parseglxmeta</code> function. Parsed GLX meta may also be obtained from a <code>PhyOutput</code> or <code>RelativeSpikes</code> struct using the <a href="/Laska.jl/dev/ref/core_ref#LaskaCore.getmeta"><code>LaskaCore.getmeta</code></a> function if a path to the meta file was provided when creating the <code>PhyOutput</code>. We then call the <code>importglx</code> function with the path to the raw data, the channels we would like to import and the time <em>indices</em> to include. In this case, assuming that the samplerate is 30000Hz we import seconds 2–4 of the recording. If all channels or times are to be included, replace either argument with <code>:</code>.</p><p>The <code>Matrix</code> returned from <code>importglx</code> will contain an analog representation of the voltage for each channel (rows) at each time (columns). The formula for converting these values to volts depends on the type of probe and settings used when recording. LaskaCore provides the <a href="/Laska.jl/dev/ref/core_ref#LaskaCore.tovolts-Tuple{AbstractArray, Dict{String, String}}"><code>LaskaCore.tovolts</code></a> function for easy conversion using information found in the same meta file as used when first importing the data.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data_volts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LaskaCore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tovolts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data_raw, meta)</span></span></code></pre></div>`,6),r=[n];function o(h,l,p,d,k,c){return i(),s("div",null,r)}const u=a(t,[["render",o]]);export{m as __pageData,u as default};
